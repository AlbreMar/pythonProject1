mean(abs((data[, i] - model$fitted.values) / data[, i])) * 100
i
model = lm(data[, i] ~ test_vector)
test_vector <- c(1:nrow(data))
model = lm(data[, i] ~ test_vector)
r = summary(model)$adj.r.squared
mape = mean(abs((data[, i] - model$fitted.values) / data[, i])) * 100
mape
# Function to calculate MAPE and adjusted R-squared
calc_mape <- function(data) {
output <- data.frame(matrix(ncol = 2, nrow = 1))
colnames(output) <- c("MAPE", "R2")
test_vector <- c(1:nrow(data))
for (i in 1:length(data)) {
model = lm(data[, i] ~ test_vector)
r = summary(model)$adj.r.squared
mape = mean(abs((data[, i] - model$fitted.values) / data[, i])) * 100
output[i, ] = c(mape, r)
}
return(output)
}
test <- calc_mape(create_simulation(100, 100))
View(test)
i
mean(abs((data[, i] - model$fitted.values) / data[, i])) * 100
# Function to calculate MAPE and adjusted R-squared
calc_mape <- function(data) {
output <- data.frame(matrix(ncol = 2, nrow = 1))
colnames(output) <- c("MAPE", "R2")
test_vector <- c(1:nrow(data))
for (i in 1:length(data)) {
model = lm(data[, i] ~ test_vector)
r = summary(model)$adj.r.squared
mape = mean(abs((data[, i] - model$fitted.values) / data[, i])) * 100
output[i, 1 : 2] = c(mape, r)
}
return(output)
}
test <- calc_mape(create_simulation(100, 100))
View(test)
View(test)
i = 1
model = lm(data[, i] ~ test_vector)
r = summary(model)$adj.r.squared
mape = mean(abs((data[, i] - model$fitted.values) / data[, i])) * 100
mape
output[i, 1 : 2] = c(mape, r)
output[i, 1 : 2]
# Function to calculate MAPE and adjusted R-squared
calc_mape <- function(data) {
output <- data.frame(matrix(ncol = 2, nrow = 1))
colnames(output) <- c("MAPE", "R2")
test_vector <- c(1:nrow(data))
for (i in 1:length(data)) {
model = lm(data[, i] ~ test_vector)
r = summary(model)$adj.r.squared
mape = mean(abs((data[, i] - model$fitted.values) / data[, i])) * 100
output[i, 1] = mape
output[i, 2] = r
}
return(output)
}
test <- calc_mape(create_simulation(100, 100))
View(test)
for (i in 1:length(data)) {
model = lm(data[, i] ~ test_vector)
r = summary(model)$adj.r.squared
mape = mean(abs((data[, i] - model$fitted.values) / data[, i])) * 100
mape
output[i, 1] = mape
output[i, 2] = r
}
output <- data.frame(matrix(ncol = 2, nrow = 1))
colnames(output) <- c("MAPE", "R2")
test_vector <- c(1:nrow(data))
for (i in 1:length(data)) {
model = lm(data[, i] ~ test_vector)
r = summary(model)$adj.r.squared
mape = mean(abs((data[, i] - model$fitted.values) / data[, i])) * 100
mape
output[i, 1] = mape
output[i, 2] = r
}
mape
View(output)
# Function to calculate MAPE and adjusted R-squared
calc_mape <- function(data) {
output <- data.frame(matrix(ncol = 2, nrow = 1))
colnames(output) <- c("MAPE", "R2")
test_vector <- c(1:nrow(data))
for (i in 1 : length(data)) {
model = lm(data[, i] ~ test_vector)
r = summary(model)$adj.r.squared
mape = mean(abs((data[, i] - model$fitted.values) / data[, i])) * 100
output[i, 1] = mape
output[i, 2] = r
}
return(output)
}
test <- calc_mape(create_simulation(100, 100))
test = NULL
test <- calc_mape(create_simulation(100, 100))
View(test)
test <- calc_mape(create_simulation(100, 100))
View(test)
data = create_simulation(100, 1000)
test = calc_mape(data)
test
data = create_simulation(1000, 100)
output <- data.frame(matrix(ncol = 2, nrow = 1))
colnames(output) <- c("MAPE", "R2")
test_vector <- c(1:nrow(data))
i
i = 1
model = lm(data[, i] ~ test_vector)
r = summary(model)$adj.r.squared
mape = mean(abs((data[, i] - model$fitted.values) / data[, i])) * 100
output[i, 1] = mape
output[i, 2] = r
View(output)
mape
mean(abs((data[, i] - model$fitted.values) / data[, i])) * 100
abs((data[, i] - model$fitted.values) / data[, i])
sum(abs((data[, i] - model$fitted.values) / data[, i]))
options(scipen = 999)
sum(abs((data[, i] - model$fitted.values) / data[, i]))
sum(abs((data[, i] - model$fitted.values) / data[, i]))
abs((data[, i] - model$fitted.values) / data[, i])
# Function to create simulation data
create_simulation <- function(sim_length, count) {
output <- data.frame(matrix(ncol = count, nrow = sim_length))
for (j in 1:count) {
for (i in 1:sim_length) {
if (i == 1) {
output[i, j] <- 0
} else {
output[i, j] <- output[i - 1, j] + rnorm(1, 0, 1)
}
}
}
return(output[2 : nrow(output)])
}
# Function to calculate MAPE and adjusted R-squared
calc_mape <- function(data) {
output <- data.frame(matrix(ncol = 2, nrow = 1))
colnames(output) <- c("MAPE", "R2")
test_vector <- c(1:nrow(data))
for (i in 1 : length(data)) {
model = lm(data[, i] ~ test_vector)
r = summary(model)$adj.r.squared
mape = mean(abs((data[, i] - model$fitted.values) / data[, i])) * 100
output[i, 1] = mape
output[i, 2] = r
}
return(output)
}
test = calc_mape(data)
data = create_simulation(1000, 100)
plot(data$X1)
data[1,1]
# Function to create simulation data
create_simulation <- function(sim_length, count) {
output <- data.frame(matrix(ncol = count, nrow = sim_length))
for (j in 1:count) {
for (i in 1:sim_length) {
if (i == 1) {
output[i, j] <- 0
} else {
output[i, j] <- output[i - 1, j] + rnorm(1, 0, 1)
}
}
}
return(output[2 : nrow(output), ])
}
data = create_simulation(1000, 100)
test = calc_mape(data)
test
which.min(test$MAPE)
plot(data$X18)
which.min(test$R2)
plot(data$X85)
which.max(test$R2)
select_best = function(data, number, direction)
{
sorted_vector <- sort(data$MAPE, decreasing = direction)  # Sort the vector in descending order
largest_elements <- sorted_vector[1 : number]  # Retrieve the first 5 elements
return(largest_elements)
}
select_best(test, 5, TRUE)
select_best(test, 5, FALSE)
select_best = function(data, number, direction)
{
sorted_vector <- order(data$MAPE, decreasing = direction)  # Sort the vector in descending order
largest_elements <- sorted_vector[1 : number]  # Retrieve the first 5 elements
return(largest_elements)
}
select_best(test, 5, FALSE)
plot(data$X18)
plot(data$X21)
plot(data$X878)
plot(data$X87)
plot(data$X28)
plot(data$X78)
select_best = function(data, number, direction)
{
sorted_vector <- order(data$R2, decreasing = direction)  # Sort the vector in descending order
largest_elements <- sorted_vector[1 : number]  # Retrieve the first 5 elements
return(largest_elements)
}
select_best(test, 5, TRUE)
plot(data$X78)
plot(data$X6)
plot(data$X2)
plot(data$X31)
select_best_mape = function(data, number)
{
sorted_vector <- order(data$MAPE, decreasing = FALSE)  # Sort the vector in descending order
largest_elements <- sorted_vector[1 : number]  # Retrieve the first 5 elements
return(largest_elements)
}
select_best_r2 = function(data, number)
{
sorted_vector <- order(data$R2, decreasing = TRUE)  # Sort the vector in descending order
largest_elements <- sorted_vector[1 : number]  # Retrieve the first 5 elements
return(largest_elements)
}
bestMape = select_best_mape(test)
bestMape = select_best_mape(test, 5)
bestR2 = select_best_r2(test, 5)
bestMape
bestR2
plot(data$X18)
plot(data$X78)
plot(data$X6)
plot(data$X2)
plot(data$X31)
plot(data$X21)
plot(data$X87)
plot(data$X28)
plot(data$X78)
# Function to calculate MAPE and adjusted R-squared
calc_mape <- function(data) {
output <- data.frame(matrix(ncol = 4, nrow = 1))
colnames(output) <- c("MAPE", "R2", "MSE", "COS")
test_vector <- c(1:nrow(data))
for (i in 1 : length(data)) {
model = lm(data[, i] ~ test_vector)
r = summary(model)$adj.r.squared
mape = mean(abs((data[, i] - model$fitted.values) / data[, i])) * 100
mse = mean((data[, i] - model$fitted.values)^2)
cos = sum(data[, i] * model$fitted.values) / (sqrt(sum(data[, i]^2)) * sqrt(sum(model$fitted.values^2)))
output[i, 1] = mape
output[i, 2] = r
output[i, 3] = mse
output[i, 4] = cos
}
return(output)
}
data = create_simulation(1000, 100)
test = calc_mape(data)
test
select_best_mape = function(data, number)
{
sorted_vector <- order(data$MAPE, decreasing = FALSE)  # Sort the vector in descending order
largest_elements <- sorted_vector[1 : number]  # Retrieve the first 5 elements
return(largest_elements)
}
select_best_r2 = function(data, number)
{
sorted_vector <- order(data$R2, decreasing = TRUE)  # Sort the vector in descending order
largest_elements <- sorted_vector[1 : number]  # Retrieve the first 5 elements
return(largest_elements)
}
select_best_mse = function(data, number)
{
sorted_vector <- order(data$MSE, decreasing = FALSE)  # Sort the vector in descending order
largest_elements <- sorted_vector[1 : number]  # Retrieve the first 5 elements
return(largest_elements)
}
select_best_cos = function(data, number)
{
sorted_vector <- order(data$COS, decreasing = FALSE)  # Sort the vector in descending order
largest_elements <- sorted_vector[1 : number]  # Retrieve the first 5 elements
return(largest_elements)
}
bestMape = select_best_mape(test, 5)
bestR2 = select_best_r2(test, 5)
bestMSE = select_best_mse(test, 5)
bestCos = select_best_cos(test, 5)
bestMape
bestR2
bestMSE
bestCos
plot(data$X36)
plot(data$X37)
plot(data$X65)
plot(data$X69)
plot(data$X61)
plot(data$X14)
sorted_vector <- order(data$MSE, decreasing = TRUE)  # Sort the vector in descending order
select_best_mse = function(data, number)
{
sorted_vector <- order(data$MSE, decreasing = TRUE)  # Sort the vector in descending order
largest_elements <- sorted_vector[1 : number]  # Retrieve the first 5 elements
return(largest_elements)
}
select_best_cos = function(data, number)
{
sorted_vector <- order(data$COS, decreasing = TRUE)  # Sort the vector in descending order
largest_elements <- sorted_vector[1 : number]  # Retrieve the first 5 elements
return(largest_elements)
}
bestMSE = select_best_mse(test, 5)
bestCos = select_best_cos(test, 5)
bestMSE
plot(data$X74)
plot(data$X77)
bestCos
plot(data$X23)
plot(data$X79)
plot(data$X95)
plot(data$X12)
plot(data$X27)
plot(data$X12)
test[23,]
test[79,]
test[95,]
plot(data$X95)
test[12,]
test[27,]
plot(data$X27)
?union
bestMape
plot(data$X63)
plot(data$X31)
plot(data$X23)
plot(data$X80)
plot(data$X79)
bestR2
plot(data$X12)
plot(data$X23)
plot(data$X32)
plot(data$X76)
plot(data$X80)
bestMSE
plot(data$X74)
plot(data$X77)
select_best_mse = function(data, number)
{
sorted_vector <- order(data$MSE, decreasing = FALSE)  # Sort the vector in descending order
largest_elements <- sorted_vector[1 : number]  # Retrieve the first 5 elements
return(largest_elements)
}
bestMSE = select_best_mse(test, 5)
bestMSE
plot(data$X36)
plot(data$X37)
test[36,]
test[37,]
select_best_mse = function(data, number)
{
sorted_vector <- order(data$MSE, decreasing = TRUE)  # Sort the vector in descending order
largest_elements <- sorted_vector[1 : number]  # Retrieve the first 5 elements
return(largest_elements)
}
bestMSE = select_best_mse(test, 5)
test[37,]
test[36,]
bestMSE
test[74,]
select_best_mse = function(data, number)
{
sorted_vector <- order(data$MSE, decreasing = FALSE)  # Sort the vector in descending order
largest_elements <- sorted_vector[1 : number]  # Retrieve the first 5 elements
return(largest_elements)
}
bestMSE
bestMSE = select_best_mse(test, 5)
bestMSE
plot(data$X80)
plot(data$X70)
plot(data$X29)
bestCos
plot(data$X23)
plot(data$X79)
plot(data$X95)
plot(data$X12)
plot(data$X27)
hpf = function (v)
{
s = 0
for (i in 3 : length(v))
{
if (v[i] - v[i - 1] < v[i - 1] - v[i - 2])
{
s = s + ((v[i] - v[i - 1]) - (v[i - 1] - v[i - 2]))^2
}
}
return(s)
}
# Function to calculate MAPE and adjusted R-squared
calc_mape <- function(data) {
output <- data.frame(matrix(ncol = 5, nrow = 1))
colnames(output) <- c("MAPE", "R2", "MSE", "COS", "HP")
test_vector <- c(1:nrow(data))
for (i in 1 : length(data)) {
model = lm(data[, i] ~ test_vector)
r = summary(model)$adj.r.squared
mape = mean(abs((data[, i] - model$fitted.values) / data[, i])) * 100
mse = mean((data[, i] - model$fitted.values)^2)
cos = sum(data[, i] * model$fitted.values) / (sqrt(sum(data[, i]^2)) * sqrt(sum(model$fitted.values^2)))
hp = hpf(data[, i])
output[i, 1] = mape
output[i, 2] = r
output[i, 3] = mse
output[i, 4] = cos
output[i, 5] = hp
}
return(output)
}
data = create_simulation(1000, 100)
test = calc_mape(data)
select_best_hp = function(data, number)
{
sorted_vector <- order(data$HP, decreasing = FALSE)  # Sort the vector in descending order
largest_elements <- sorted_vector[1 : number]  # Retrieve the first 5 elements
return(largest_elements)
}
bestMape = select_best_mape(test, 5)
bestR2 = select_best_r2(test, 5)
bestMSE = select_best_mse(test, 5)
bestCos = select_best_cos(test, 5)
bestHP = select_best_hp(test, 5)
bestMape
bestR2
bestMSE
bestCos
bestHP
plot(data$X92)
plot(data$X14)
plot(data$X82)
plot(data$X85)
plot(data$X93)
plot(data$X65)
plot(data$X37)
plot(data$X63)
plot(data$X17)
plot(data$X15)
plot(data$X63)
plot(data$X18)
plot(data$X39)
plot(data$X100)
plot(data$X99)
plot(data$X63)
plot(data$X4)
plot(data$20)
plot(data$X20)
plot(data$X12)
plot(data$X7)
plot(data$X77)
setwd("C:/Users/albre/PycharmProjects/pythonProject1")
data = read.csv('SPY.csv', sep = ',')
View(data)
View(data)
returns = c()
for (i in 1 : nrow(data) - 1)
{
returns[i] = data[i + 1, 5] - data[i, 5]
}
plot(returns)
returns = c()
squares = c()
for (i in 1 : nrow(data) - 1)
{
returns[i] = data[i + 1, 5] - data[i, 5]
squares[i] = returns[i] ^2
}
plot(squares)
acf(squares)
acf(returns)
acf(squares)
data = read.csv('SPY.csv', sep = ',')
returns = c()
squares = c()
for (i in 1 : nrow(data) - 1)
{
returns[i] = data[i + 1, 5] / data[i, 5] - 1
squares[i] = returns[i] ^2
}
acf(squares)
data = read.csv('SPY.csv', sep = ',')
returns = c()
squares = c()
for (i in 1 : nrow(data) - 1)
{
returns[i] = log(data[i + 1, 5]) - log(data[i, 5])
squares[i] = returns[i] ^2
}
acf(squares)
plot(squares)
plot(returns)
plot(returnsm, type = 'b')
plot(returns, type = 'b')
data = read.csv('SPY.csv', sep = ',')
returns = c()
squares = c()
for (i in 1 : nrow(data) - 1)
{
returns[i] = abs(log(data[i + 1, 5]) - log(data[i, 5]))
squares[i] = returns[i] ^2
}
acf(returns)
